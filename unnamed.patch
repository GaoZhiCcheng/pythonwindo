Index: 面向对象-笔记/class.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 面向对象-笔记/class.py	(date 1564304546203)
+++ 面向对象-笔记/class.py	(date 1564304546203)
@@ -0,0 +1,9 @@
+# 定义一个类
+class Myclass:
+    '这是一个类'
+m =  Myclass() # 实例化类
+print('输出类的说明')# 显示文本信息
+print(m.__doc__)
+print('显示类的帮助信息')
+s = help(m)
+print(s)
Index: 面向对象-笔记/self.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 面向对象-笔记/self.py	(date 1564323194120)
+++ 面向对象-笔记/self.py	(date 1564323194120)
@@ -0,0 +1,13 @@
+# 类的属性 self 相当于 一个房子的门
+class Boll:
+    def ast(self,name):
+        self.name = name
+    def bs(self):
+        print('hello {0},我是一个球，你要一起玩吗'.format(self.name))
+# 实例化
+b = Boll()
+b.ast('xiaopang')
+c = Boll()
+c.ast('dapang')
+b.bs()
+c.bs()
\ No newline at end of file
Index: 面向对象-笔记/inlt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 面向对象-笔记/inlt.py	(date 1564324775411)
+++ 面向对象-笔记/inlt.py	(date 1564324775411)
@@ -0,0 +1,9 @@
+# __inlt__是一个魔法函数 直接初始类
+class Asdf:
+    def __init__(self,name,age):
+        self.name=name
+        self.age=age
+    def b(self):
+        return print('我叫{}，今年岁了{}'.format(self.name,self.age))
+a = Asdf('gao',age = 24)
+a.b()
\ No newline at end of file
Index: 面向对象-笔记/lei.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 面向对象-笔记/lei.py	(date 1559043296993)
+++ 面向对象-笔记/lei.py	(date 1559043296993)
@@ -0,0 +1,15 @@
+
+
+
+class Dictclass(object):
+    def  __init__(self,dict):
+        self.dict = dict
+    def del_dict(self,key):
+        if key not in self.dict.keys():
+            return 'key不在字典里面'
+        else:
+            self.dict.pop(key)
+            return '删除成功！'
+
+d = Dictclass({'a':11,'b':546,'c':867})
+print(d.del_dict('c'))
\ No newline at end of file
Index: 面向对象-笔记/公有和私有.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 面向对象-笔记/公有和私有.py	(date 1564325402116)
+++ 面向对象-笔记/公有和私有.py	(date 1564325402116)
@@ -0,0 +1,9 @@
+class Bass:
+    def name(self,name): # 这是公有函数 所有人可见
+        self.name = name
+        print('%s 是大家的'%self.name)
+    def __nos(self):
+        print('我是私有的！')
+a = Bass()
+a.name("小毛毛")
+a._Bass__nos()# 调用私有的方法
\ No newline at end of file
Index: 面向对象-笔记/继承.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- 面向对象-笔记/继承.py	(date 1564397232003)
+++ 面向对象-笔记/继承.py	(date 1564397232003)
@@ -0,0 +1,46 @@
+# 在python中子类是可以继承父类的所有属性 请看下列
+class Psor: # 创建一个父类
+    def far(self):
+        print("正在调用父类..........")
+# 建立子类
+
+class A(Psor):
+    def erzi(self):
+        print("我是子类 我已经继承了父类的属性......")
+# 实例化父类
+c =  Psor()
+# 调用父类
+c.far()
+# 实例化子类
+b = A()
+# 调用子类 此时 子类拥有父类的属性
+b.far()
+b.erzi()
+# 同时也可以进行多重继承 请看下列
+
+
+# 创建三个父类 进行多重继承
+class A:
+    def sd(self):
+        print('我继承 1 .........')
+class B:
+    def asd(self):
+        print('我是继承 2')
+class C:
+    def  bsd(self):
+        print("我是继承3")
+
+
+# 建立子类 继承上面三个父类
+class D(A,B,C):
+    def zilei(self):
+        print('我是子类 我有三个父类')
+
+
+
+# 此时 子类可以调用以上三个父类的属性
+d = D()
+d.zilei()
+d.asd()
+d.bsd()
+d.sd()
